<?php
/*
 * Created on Aug 7, 2013
 *
 * To change the template for this generated file go to
 * Window - Preferences - PHPeclipse - PHP - Code Templates
 */

require_once(drupal_get_path('module', 'pickem') . '/pickem.model.inc');

function pickem_init() {
	$now = time();
	$query = db_select('week', 'w')
		->fields('w')
		->condition('end', $now, '>')
		->condition('start', $now, '<=')
		->condition('season', variable_get('pickem.current_season', date('Y', $now)))
		->orderBy('start')
		->range(0, 1);

	$result = $query->execute();
	$current_week = $result->fetchObject();
	if (!empty($current_week)) {	
		if (!isset($_SESSION['current_week']) || $_SESSION['current_week']->week != $current_week->week) {
			$_SESSION['current_week'] = $current_week;
			variable_set('pickem.current_week', $current_week->week);
		}
	}
}

function pickem_theme($existing, $type, $theme, $path) {
	return array(
		'game_title' => array(
			'variables' => array('game' => NULL, 'logobasepath' => NULL, 'other_player' => NULL),
			'template' => 'game_title',
			'path' => drupal_get_path('module', 'pickem') . '/theme',
		),
		'school_colors_css' => array(
			'variables' => array('school' => NULL),
			'template' => 'school_colors_css',
			'path' => drupal_get_path('module', 'pickem') . '/theme',
		),
		'slate_form' => array(
			'render element' => 'form',
			//'template' => 'form--game-slate',
			'file' => 'pickem.admin.inc',
		),
		'admin_scoreboard' => array(
			'render element' => 'form',
			'file' => 'pickem.admin.inc',
		),
		'slate_overview' => array(
			'variables' => array('slate' => NULL),
		),
		'slate_compare' => array(
			'variables' => array('slate' => NULL, 'slate_compare' => NULL, 'games' => NULL, 'player_name' => NULL, 'compare_player' => NULL, 'week' => NULL),
		)
	);
}

function pickem_form_alter(&$form, &$form_state, $form_id) {
	if ($form_id == 'pickem_slate_form') {
		$form['#theme'] = array('slate_form');
	}
	if ($form_id == 'pickem_admin_week_games') {
		$form['#theme'] = array('admin_scoreboard');
	}
}

/**
 * Implements hook_preprocess_page()
 */
function pickem_preprocess_page($variables) {
	//kpr($variables);
}

/** 
 * Implements hook_action_info()
 */
function pickem_action_info() {
	return array(
		'pickem_user_register_action' => array(
			'type' => 'user',
			'label' => t('Provision Pickem player on initial login'),
			'configurable' => FALSE,
			'triggers' => array('user_insert'),
		),
	); 
}

function pickem_menu() {
	$_current_season = variable_get('pickem.current_season');
	
	$items = array(
		'loadgoogle' => array(
			'title' => 'Fetch From Google',
			'page callback' => 'pickem_fetch_from_google',
			'access callback' => TRUE,
		),
		# PLAYER/USER specific routes
		'user/%user/pickemresults' => array(
			'title' => 'Pickem Records by School',
			'file' => 'pickem.player.inc',
			'page callback' => 'pickem_player_results',
			'page arguments' => array(1),
			'access callback' => TRUE,
			'type' => MENU_LOCAL_TASK,
    	'weight' => 100,		
		),
		'user/%user/pickemrecords' => array(
			'title' => 'Pickem Results by Week',
			'file' => 'pickem.player.inc',
			'page callback' => 'pickem_player_records',
			'page arguments' => array(1),
			'access callback' => TRUE,
			'type' => MENU_LOCAL_TASK,
    	'weight' => 99,		
		),
		### END PLAYER/USER specific routes
		
		'admin/config/pickem' => array(
			'title' => 'Pickem Administration',
			'description' => 'Adjust settings for your Pickem environment',
			'position' => 'right',
			'weight' => -5,
			'page callback' => 'system_admin_menu_block_page',
			'access arguments' => array('administer pickem settings'),
			'access callback' => TRUE,
			'file' => 'system.admin.inc',
			'file path' => drupal_get_path('module', 'system'),
		),
		'admin/config/pickem/settings' => array(
			'title' => 'Pickem Settings',
			'description' => 'Configure the settings for this Pickem',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('pickem_admin_settings'),
			'access callback' => 'pickem_admin_access',
			'access arguments' => array('administer pickem settings'),
			'file' => 'pickem.admin.inc',
		),
		'admin/config/pickem/games' => array(
			'title' => 'Games Management',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('pickem_games_admin'),
			'access arguments' => array('administer pickem games'),
			'access callback' => 'pickem_admin_access',
			'type' => MENU_NORMAL_ITEM,   
		),
		'admin/config/pickem/players' => array(
			'title' => 'Players Management',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('pickem_admin_players'),
			'access arguments' => array('administer pickem settings'),
			'access callback' => 'pickem_admin_access',
			'file' => 'pickem.admin.inc',
			'type' => MENU_NORMAL_ITEM,
		),
		'admin/config/pickem/games/%pickem_game/edit' => array(
			'page callback' => 'drupal_get_form',
			'page arguments' => array('pickem_game_edit', 4),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK,
		),
		
		// STANDINGS menu routing
		'pickem/standings' => array(
			'title' => 'Pickem Standings',
			'page callback' => 'pickem_standings_overview',
			'page arguments' => array('-1', '1'),
			'access callback' => TRUE,
			'type' => MENU_NORMAL_ITEM,
			'file' => 'pickem.standings.inc',
		),
		'pickem/standings/overall' => array(
			'title' => 'Overall',
			'type' => MENU_DEFAULT_LOCAL_TASK,
			'page arguments' => array('-1'),
			'access callback' => TRUE,
			'weight' => -10,
		),
		
		// SCHEDULE routing
		'schedule' => array(
			'title' => '2013 Schedule',
			#'page callback' => 'pickem_schedule_overview',
			'page callback' => 'pickem_school_listing',
			'access callback' => TRUE,
			'file' => 'pickem.school.inc',
		),
		'schedule/ncaaf/%pickem_school' => array(
			'title callback' => 'pickem_school_title',
			'title arguments' => array(2),
			'page callback' => 'pickem_school_slate',
			'page arguments' => array(2, 1),
			'access callback' => TRUE,
			'file' => 'pickem.school.inc',
		),
		// ###### end SCHEDULE routing
		
		# Add the "Pickem" link to the admin menu
		'admin/pickem' => array(
			'title' => 'Pickem',
			'page callback' => 'pickem_overview',
			'access callback' => TRUE,
			'weight' => -5,
		),
		'admin/pickem/schools' => array(
			'title' => 'Schools',
			'description' => 'List of schools',
			'page callback' => 'pickem_school_listing',
			'access callback' => TRUE,
			'file' => 'pickem.school.inc',
		),
		'admin/pickem/games/conf' => array(
			'title' => 'Games - By Conference',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('pickem_games_listing', 3),
			'access callback' => 'pickem_admin_access',
			'access arguments' => array('administer pickem games'),
		),
		'admin/pickem/games/week' => array(
			'title' => 'Scoreboard - By Week',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('pickem_admin_week_games'),
			'access callback' => TRUE,
			'file' => 'pickem.admin.inc',
		),
		'pickem/scoreboard/update' => array(
			'title' => 'Update Scoreboard',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('pickem_admin_week_games'),
			'access callback' => 'pickem_admin_access',
			'access arguments' => array('administer pickem games'),
			'menu_name' => 'Navigation',
			'file' => 'pickem.admin.inc',
		),
		# end Pickem link in admin menu
		
		'pickem/games/week' => array(
			'title' => 'Scoreboard - By Week',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('pickem_games_listing', 2),
			'access callback' => TRUE,
		),
		'pickem/games/conf' => array(
			'title' => 'Scoreboard - By Conference',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('pickem_games_listing', 2),
			'access callback' => TRUE,
		),
		'pickem/games/conf/all' => array(
			'title' => 'All',
			'access callback' => TRUE,
			'type' => MENU_DEFAULT_LOCAL_TASK,
			'weight' => -10,
		),
		'pickem/schools' => array(
			'title callback' => 'pickem_school_page_title',
			'page callback' => 'pickem_school_listing',
			'access callback' => TRUE,
			'file' => 'pickem.school.inc',
			'menu_name' => 'Main menu',
		),
		'pickem/schools/all' => array(
			'title' => 'All',
			'type' => MENU_DEFAULT_LOCAL_TASK,
			'access callback' => TRUE,
			'weight' => -10,
		),
		
		# SLATE-related menus
		'pickem/slate' => array(
			'title' => 'Make Your Picks',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('pickem_slate_listing'),
			'access callback' => TRUE,
			'file' => 'pickem.slate.inc',
		),
		'pickem/load/slate/stats/%' => array(
			'type' => MENU_CALLBACK,
			'page callback' => 'pickem_ajax_load_slate_stats',
			'page arguments' => array(4),
			'access callback' => TRUE,
		),
		//'pickem/slate-new' => array(
		//	'title' => 'Make Your Picks II',
		//	'page callback' => 'drupal_get_form',
		//	'page arguments' => array('pickem_slate_form'),
		//	'file' => 'pickem.slate.inc',
		//	'access callback' => FALSE,
		//	#'access arguments' => array('administer pickem settings'),
		//),
		'pickem/slate/all' => array(
			'title' => 'All',
			'type' => MENU_LOCAL_TASK,
			'access callback' => TRUE,
			'weight' => -10,
		),
		'pickem/overview' => array(
			'title' => 'Pickem Overview',
			'page callback' => 'pickem_slate_overview',
			'access callback' => TRUE,
		),
		/*
		'pickem/slate/breakdown' => array(
			'title' => 'Pick Breakdown',
			'type' => MENU_LOCAL_ACTION,
			'access callback' => 'pickem_player_access',
			'page callback' => 'pickem_pick_breakdown',
			'file' => 'pickem.stats.inc',
		),
		*/
		'pickem/ajax/slate/add' => array(
			'type' => MENU_CALLBACK,
			'page callback' => 'pickem_ajax_slate_add',
			'page arguments' => array(4),	# gid
			'access callback' => TRUE,
		),
		'pickem/ajax/slate/remove' => array(
			'type' => MENU_CALLBACK,
			'page callback' => 'pickem_ajax_slate_remove',
			'page arguments' => array(4),	# gid
			'access callback' => TRUE,
		),
		# END of SLATE-related menus
		
		// CSS support for school colors
		'pickem/css/%pickem_school' => array(
			'type' => MENU_CALLBACK,
			'file' => 'pickem.school.inc',
			'page callback' => 'pickem_school_colors_css',
			'access callback' => TRUE,
			'page arguments' => array(2),
		),
	);	
	$result = db_query("SELECT name, title, displaytitle FROM conference WHERE name IN ('acc','sec','big10','big12','pac12','ind','aac', 'mac', 'cusa', 'mwc', 'sunbelt') order by title");
	$menu_weight = -6;
	foreach ($result as $conf) {
		$items['admin/pickem/games/conf/' . $conf->name] = array(
			'title' => $conf->displaytitle,
			'page callback' => 'drupal_get_form',
			'page arguments' => array('pickem_games_listing', 3, 4),
			'access callback' => TRUE,
			'type' => MENU_LOCAL_TASK,
		);
		$items['pickem/games/conf/' . $conf->name] = array(
			'title' => $conf->displaytitle,
			'access callback' => TRUE,
			'type' => MENU_LOCAL_TASK,
			'weight' => _pickem_menu_weight_for_conf($conf->name),
			'page arguments' => array('pickem_games_listing', 2, 3),
		);
		$items['pickem/schools/'.$conf->name] = array(
			'title callback' => 'pickem_school_page_title',
			'title arguments' => array($conf->name),
			'page arguments' => array(2),
			'access callback' => TRUE,
			'type' => MENU_LOCAL_TASK,
			'weight' => _pickem_menu_weight_for_conf($conf->name),
		);
	}
	$result = db_query('SELECT DISTINCT week FROM {game} WHERE season = :season ORDER BY week LIMIT 15', array(':season' => variable_get('pickem.current_season')));
	foreach($result as $week) {
		$weekkey = sprintf("%2d", $week->week);
		$items['pickem/slate/'.$week->week] = array(
			'title' => $weekkey,
			'page callback' => 'drupal_get_form',
			'page arguments' => array('pickem_slate_listing', 2),
			'access callback' => TRUE,
			'type' => (isset($_SESSION['current_week']) && $week->week == $_SESSION['current_week']->week) ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
			'file' => 'pickem.slate.inc',
		);
		$items['pickem/scoreboard/update/'.$week->week] = array(
			'title' => $weekkey,
			'page callback' => 'drupal_get_form',
			'page arguments' => array('pickem_admin_week_games', 3),
			'access callback' => 'pickem_admin_access',
			'access arguments' => array('administer pickem games', 3),
			'type' => (isset($_SESSSION['current_week']) && $week->week == $_SESSION['current_week']->week) ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
			'file' => 'pickem.admin.inc',
		);
		$items['pickem/slate/'.$week->week.'/breakdown'] = array(
			'title' => 'Week ' . $week->week . ' Pick Breakdown',
			'page callback' => 'pickem_pick_breakdown',
			'page arguments' => array(2),
			'access callback' => 'pickem_player_access',
			'type' => MENU_LOCAL_ACTION,
			'file' => 'pickem.stats.inc',
		);
		$items['pickem/slate/' . $week->week . '/compare'] = array(
			'title' => 'Head-to-Head Pick Comparison',
			'type' => MENU_LOCAL_ACTION,
			'page callback' => 'drupal_get_form',
			'page arguments' => array('pickem_slate_compare'),
			'access callback' => TRUE,
			'file' => 'pickem.slate.inc',
			'weight' => 100,
		);
		$items['pickem/slate/'.$week->week.'/overview'] = array(
			'title' => 'Pick Overview',
			'page callback' => 'pickem_slate_overview',
			'page arguments' => array(2),
			'access callback' => 'pickem_player_access',
			'type' => MENU_LOCAL_ACTION,
		);
		$items['pickem/standings/'.$week->week] = array(
			'title' => sprintf("%2d", $week->week),
			'page arguments' => array(2, variable_get('pickem.current_season')),
			'access callback' => TRUE,
			'type' => MENU_LOCAL_TASK,
		);
		$items['admin/pickem/games/week/' . $week->week] = array(
			'title' => $weekkey,
			'page callback' => 'drupal_get_form',
			'page arguments' => array('pickem_games_listing', 3, 4),
			'access callback' => TRUE,
			'type' => MENU_LOCAL_TASK,
		);
		$items['pickem/games/week/' . $week->week] = array(
			'title' => $weekkey,
			'page callback' => 'drupal_get_form',
			'page arguments' => array('pickem_games_listing', 2, 3),
			'access callback' => TRUE,
			'type' => MENU_LOCAL_TASK,
		);
	}
	return $items;
}

function pickem_slate_listing_submit2($form, $form_state) {
	global $user;

	drupal_get_messages(NULL, TRUE);
	$now = time();
	
	foreach ($form_state['values'] as $key => $value) {
		if (substr($key, 0, 3) == 'gid') {
			$gid_data = explode('_', $key);
			if ($now < $form_state['cutoff_time'][$gid_data[1]]) {
				if ($form_state['picks'][$gid_data[1]]) {
					// existing pick -- update
					$o = $form_state['picks'][$gid_data[1]];
					$o->pick_school_name = $value['pick_school_name'];
					$o->season = 2013;
					drupal_write_record('pick', $o, 'pkid');
				} else {
					// new pick
					$c = db_insert('pick')
						->fields(array(
							'pick_school_name' => $value['pick_school_name'],
							'uid' => $user->uid,
							'gid' => $gid_data[1],
							'week' => $form_state['values']['week'],
							'season' => '2013',
						)
					)->execute();
				}
			} else {
				drupal_set_message(t('Unable to accept your pick for ' . $value['pick_school_name'] . ' because the deadline has passed.'), 'error');
			}
		}
	}
	drupal_set_message(t('Your pick selections have been saved.'));
}

function pickem_slate_title($week = NULL) {
	$output = variable_get('pickem.pickem_title','ACCbbs Pickem') . ' - Pickem Slate';
	if ($week) {
		$output .= ', Week' . $week;
	}
	return $output;
}
/*
function pickem_slate_form($form, &$form_state, $week = NULL) {
	if ($week == NULL) {
		$week = $_SESSION['current_week'];
	};
	
	$result = db_query('SELECT * FROM {school} WHERE conf_name = :conf ORDER BY title', array(':conf' => 'acc'));
	$options = array();
	while($school = $result->fetchObject()) {
		$options[$school->name] = $school->displaytitle;
	}
	$form['schools'] = array(
		'#type' => 'select',
		'#options' => $options,
		'#title' => t('Schools'),
		'#description' => t('List of ACC schools'),
		'#default_value' => '',
	);
	$form['actions'] = array(
		'#type' => 'actions',
	);
	$form['actions']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
	);
	
	return $form;
}

function pickem_slate_form_submit($form, $form_state) {
	dpm($form_state['values']);
}
*/
function pickem_school_page_title($conf = NULL) {
	if ($conf != NULL) {
		$result = db_query("SELECT displaytitle FROM {conference} WHERE name = :conf", array(':conf' => $conf));
		$c = $result->fetchObject();
		return $c->displaytitle;
	} else {
		return 'Schools';
	}
}

function pickem_player_access() {
	global $user;
	if ($user->uid == 1) {
		return TRUE;
	}	
	return user_access('pickem player') || user_access('administer pickem settings');
}

function pickem_admin_access() {
	global $user;

	$arguments = func_get_args();
	//$account = array_shift($arguments);
	if ($user->uid == 1) {
		return TRUE;
	}

	foreach($arguments as $permission) {
		if(user_access($permission)) {
			return TRUE;
		}
	}
	return FALSE;
}

/**
 * Fetch the slate of games for a pickem week
 */
function pickem_fetch_slate($week, $pickem_id, $player_uid = NULL) {
	global $user;
	
	$target_uid = $user->uid;
	if ($player_uid != NULL) {
		$target_uid = $player_uid;
	}
	$query = db_select('slate', 's')->extend('PagerDefault')->extend('TableSort');
	$query->join('game', 'g', 's.gid = g.gid');
	$query->leftJoin('pick', 'p', 'p.gid = g.gid and p.uid = :uid and p.season = :season', array(':uid' => $target_uid, ':season' => variable_get('pickem.current_season')));
	$query->leftJoin('school', 'host', 'g.host_school_name = host.name');
	$query->leftJoin('school', 'visiting', 'g.visiting_school_name = visiting.name');
	$query->leftJoin('school', 'winning', 'g.winning_school_name = winning.name');
	$query->leftJoin('school', 'userpick', 'p.pick_school_name = userpick.name');
	$query->leftJoin('sportspoll_tally', 't1', 'g.host_school_name = t1.school_name AND t1.rank <= 25 AND t1.week = ' . $week);
	$query->leftJoin('sportspoll_tally', 't2', 'g.visiting_school_name = t2.school_name and t2.rank <= 25 AND t2.week = ' . $week);
	$query->leftJoin('conference', 'hc', 'g.host_conf_name = hc.name');
	$query->leftJoin('conference', 'vc', 'g.visiting_conf_name = vc.name');
	
	$query->fields('g');
	$query->addField('p', 'pick_school_name', 'pick_school_name');
	$query->addField('p', 'correct', 'pick_is_correct');
	$query->addField('userpick', 'displaytitle', 'userpick_school');
	$query->addField('userpick', 'name', 'userpick_school_name');
	$query->addField('host', 'displaytitle', 'host_school');
	$query->addField('host', 'sid', 'host_sid');
	$query->addField('visiting', 'displaytitle', 'visiting_school');
	$query->addField('visiting', 'sid', 'visiting_sid');
	$query->addField('winning', 'displaytitle', 'winning_school');
	$query->addField('hc', 'displaytitle', 'host_conf');
	$query->addField('vc', 'displaytitle', 'visiting_conf');
	$query->addField('t1', 'rank', 'host_school_rank');
	$query->addField('t2', 'rank', 'visiting_school_rank');
	$query->addField('p', 'pkid');
	$query->orderBy('g.game_date');
	
	$query->condition('s.slate_id', $week);
	$query->condition('s.pid', $pickem_id);
	$query->limit(50);
	$result = $query->execute();
	return $result;
}

function pickem_fetch_games($week, $conf, $include_slate = TRUE) {
	$query = db_select('game', 'g')->extend('PagerDefault')->extend('TableSort');
	
	if ($include_slate) {
		# tip from https://drupal.org/node/1253688#comment-4882652
		$subquery = db_select('slate', 'sl');
		$subquery->addField('sl', 'slate_id', 'slate_id');
		$subquery->addField('sl', 'gid', 'slate_gid');

		if ($week != NULL) {
			$subquery->condition('slate_id', $week);
		}
		$query->leftJoin($subquery, 'sl', 'g.gid = sl.slate_gid');
		$query->addField('sl', 'slate_id', 'slate_id');
		$query->addField('sl', 'slate_gid', 'slate_game_id');
	}

	$query->join('school', 'host', 'g.host_school_name = host.name');
	$query->join('school', 'visiting', 'g.visiting_school_name = visiting.name');
	
	$query->fields('g');
	$query->addField('host', 'displaytitle', 'host_school');
	$query->addField('visiting', 'displaytitle', 'visiting_school');
	$query->orderBy('game_date');
	
	if ($week != NULL) {
		$query->condition('week', $week);
	}
	if ($conf != NULL) {
		$or = db_or();
		$or->condition('host_conf_name', $conf);
		$or->condition('visiting_conf_name', $conf);
		$query->condition($or);
	}

	$query->limit(25);
	$result = $query->execute();
	
	return $result;
}

function pickem_slate_overview($week = NULL) {
	if ($week == NULL) {
		$week = $_SESSION['current_week']->week;
	}
	$season = variable_get('pickem.current_season', date('Y'));

	$pick_data = pickem_load_pick_data($week, $season, array('ignore-player-stats'));

	$slate = array();
	foreach ($pick_data['game'] as $gid => $game) {
		if ($game['week'] == $week) {
			$slate[] = $game;
		}
	}
	return array(
		'#theme' => 'slate_overview',
		'#slate' => $slate,
	);
}

function theme_slate_overview($variables) {
	$slate = $variables['slate'];

	$out = '<h3>' . t('Welcome to the ACCbbs Pickem, hosted by SportSched.com') . '</h3>';
	$out .= '<p>' . t('Week @week is underway, with @gamecount games in the slate.  This is the breakdown of picks, according to our experts:',
		array(
		'@week' => $_SESSION['current_week']->week,
		'@gamecount' => count($slate))) . '</p>';
	#$out .= '<ul>';
	$out = '<table class="table table-striped">';

	foreach ($slate as $game) {
		$pct = 0;
		$our_favorite = '';
		$our_favorite_name = '';
		$other = '';
		if ($game[$game['host_school_name']]['count'] > $game[$game['visiting_school_name']]['count']) {
			$pct = $game[$game['host_school_name']]['count'] / $game['num_picks'];
			$our_favorite = $game['host_school'];
			$our_favorite_name = $game['host_school_name'];
			$other = $game['visiting_school'];
		} else if ($game[$game['visiting_school_name']]['count'] > $game[$game['host_school_name']]['count']){
			$pct = $game[$game['visiting_school_name']]['count'] / $game['num_picks'];
			$our_favorite = $game['visiting_school'];
			$our_favorite_name = $game['visiting_school_name'];
			$other = $game['host_school'];
		} else {
			$pct = $game[$game['visiting_school_name']]['count'] / $game['num_picks'];
			$our_favorite = array($game['visiting_school'], $game['host_school']);
			$our_favorite_name = array($game['visiting_school_name'], $game['host_school_name']);
			$other = $game['host_school'];
		}
		
		$point_spread = array();
		$point_spread_str = '';
		if ($game['betting_line']) {
			$point_spread = explode(':', $game['betting_line']);
			$point_spread[1] = ($point_spread[0] == $game['host_school_name']) ? $point_spread[1] : '+' . abs($point_spread[1]);
			$point_spread[] = ($point_spread[0] == $game['host_school_name']) ? $game['host_school'] : $game['visiting_school'];
			$point_spread[0] = ($point_spread[0] == $game['host_school_name']) ? $point_spread[0] : $game['visiting_school_name'];
			$point_spread_str = ' (' . $point_spread[1] . ')';
		}

		$row_class = '';
		$round_pct = round($pct * 100);
		if ($game['completed'] == 'Y') {
			$row_class = 'success';
		} else {
			if (($round_pct >= 40) && ($round_pct <= 60)) {
				$row_class = 'warning';
			}
		}
		$pct = number_format($round_pct);
		$out .= '<tr class="' . $row_class . '">';
		$out .= '<td width="50%">';
		
		if ($game['completed'] == 'Y') {
			$out .= t('<h3>@visiting_school - @visiting_score<br />@host_school - @host_score</h3>',
				array('@visiting_school' => $game['visiting_school'], 
							'@visiting_score' => $game['visiting_score'], 
							'@host_school' => $game['host_school'], 
							'@host_score' => $game['host_score']
							)
						);
		} else {
			$out .= t('<h3>@visiting_school<br />@vs_at @host_school@point_spread</h3>',
				array(
					'@visiting_school' => $game['visiting_school'], 
					'@vs_at' => $game['vs_at'], 
					'@host_school' => $game['host_school'], 
					'@point_spread' => $point_spread_str,
				)
			)	. date('l, M j', $game['game_date']) . ' - ';
			
			//. '<h3>' . $game['visiting_school'] . '<br />' . $game['vs_at'] . ' ' . $game['host_school'] . $point_spread_str . '</h3>'
	
			if (date('g:i A', $game['game_date']) == '12:00 AM') {
				$out .= 'TBA';
			} else {
				$out .= date('g:i A', $game['game_date']);
			}
		}

		$out .= '</td>';
		if (is_array($our_favorite)) {
			$out .= '<td>'
				. '<img class="img-polaroid" src="/sites/all/modules/pickem/logos/ncaaf/' . $our_favorite_name[0] . '.gif" width="80" />&nbsp;'
				. '<img class="img-polaroid" src="/sites/all/modules/pickem/logos/ncaaf/' . $our_favorite_name[1] . '.gif" width="80" /><br /><br />'
				. '<div style="font-size: 110%">Our Experts are evenly divided on both teams.</div>'
				. '</td>';
		} else {
			$out .= '<td>'
				. '<img class="img-polaroid" src="/sites/all/modules/pickem/logos/ncaaf/' . $our_favorite_name . '.gif" width="80" /><br /><br />'
				. '<div style="font-size: 110%"><strong>' . $pct . '% of our experts</strong> favor <strong>' . $our_favorite . '</strong> over ' . $other . '</div>'
				. '</td>';
			
		}
		$out .= '</tr>';
		
		
		#$out .= '<li><h3>' . $game['visiting_school'] . ' vs ' . $game['host_school'] . '</h3>';
		#$out .= t('<strong>' . $pct . '% of our experts</strong> are picking <strong><em>@favorite</em></strong> over @other.', array('@favorite' => $our_favorite, '@other' => $other)) . '<br /></li>';
	}
	$out .= '</table>';
	#$out .= '</ul>';

	return $out;
}

function pickem_games_listing($form, &$form_state, $objtype = NULL, $objval = NULL) {
	drupal_add_library('system', 'drupal.ajax');
	
	if ($objtype == 'week') {
		$objval = ($objval == NULL) ? 1 : $objval;
	} else if ($objtype == 'conf') {
		$objval = ($objval == NULL) ? variable_get('pickem.default_conference') : $objval;
	}
	
	$result = NULL;
	if ($objtype == 'week') {
		$result = pickem_fetch_games($objval, NULL);
	} else if ($objtype == 'conf') {
		$result = pickem_fetch_games(NULL, $objval);
	}	

	$headers = array(
		t('Date'),
		t('Day'),
		t('Home'),
		t('Score'),
		t('Visitor'),
		t('Score'),
		t('Status'),
		t('Location'),
	);
	if (path_is_admin(current_path()) || user_access('administer pickem games')) {
		$headers[] = t('Options');
	}
	
	$rows = array();
	
	while($record = $result->fetchObject()) {
		$record->game_date_str = date('M j, Y', $record->game_date);
		$record->kickoff_time = date('g:i A', $record->game_date);
		if ($record->kickoff_time == '12:00 AM') {
			$record->kickoff_time = 'TBA';
		}
		$record->game_day = date('D', $record->game_date);

		$game_title = $record->visiting_school;
		if ($record->neutral) {
			$game_title .= ' vs ';
		} else {
			$game_title .= ' at ';
		}
		$game_title .= $record->host_school;
		$game_status = $record->completed == 'Y' ? 'F' : $record->kickoff_time;
		$record->host_score = $record->host_score == '' ? '-' : $record->host_score;
		$record->visiting_score = $record->visiting_score == '' ? '-' : $record->visiting_score;
	
		$game_classes = array();
		if ($record->completed == 'Y') {
			$game_classes[] = 'game-complete';
		}

		$row = array(
			'data' => array(
				$record->game_date_str,
				$record->game_day,
				$record->host_school,
				$record->host_score,
				$record->visiting_school,
				$record->visiting_score,
				$game_status,
				$record->location,
			),
			'classes' => $game_classes,
		);
		if ($record->completed == 'N' && (path_is_admin(current_path()) || user_access('administer pickem games'))) {
			$linktext = $record->slate_game_id ? 'Remove from Slate' : 'Add To Slate';
			$linkpath = $record->slate_game_id ? 'remove' : 'add';
			$row['data'][] = array(
				'data' => array(
					'#type' => 'link',
					'#title' => t($linktext),
					'#href' => 'pickem/ajax/slate/' . $linkpath . '/' . $record->gid,
					'#ajax' => array(
						'wrapper' => 'slateCell-' . $record->gid,
						'method' => 'html',
					),
				),
				'id' => 'slateCell-' . $record->gid,
			);
			/*
			$row['data'][] = '<div id="slateCell-' . $record->gid . '">' . l(t($linktext), 'pickem/ajax/slate/' . $linkpath . '/' . $record->gid, 
				array(
					'attributes' => array(
						'class' => array('slateTrigger','use-ajax')
					)
				)
			) . '</div>';
			*/
		} else {
			$row['data'][] = '&nbsp;';
		}
		$rows[] = $row;
		#kpr($record);
	}
	
	$form['slate'] = array(
		'#theme' => 'table',
		'#header' => $headers,
		'#rows' => $rows,
		'#attributes' => array(
			'class' => array('table','table-condensed'),
		)
	);
	$form['pager'] = array(
		'#theme' => 'pager',
	);
	return $form;
}

function pickem_ajax_slate_add($gid) {
	// got a game id -- let's add the game to the slate..
	$game = pickem_load_game($gid);
	$o = new stdClass();
	$o->pid = 1;
	$o->gid = $gid;
	$o->season = $game->season;
	$o->slate_id = $game->week;
	$res = drupal_write_record('slate', $o);
	
	$commands = array();
	$msg = "Remove from Slate";
	if ($res == FALSE) {
		$commands[] = ajax_command_append('#slateCell-' . $gid, t('Unable to add to slate!'));
	} else {
		$output = array(
			'#type' => 'link',
			'#title' => t($msg),
			'#href' => 'pickem/ajax/slate/remove/' . $gid,
			'#attributes' => array('class' => array('use-ajax', 'slateTrigger')),
			'#ajax' => array(
				'wrapper' => 'slateCell-' . $gid,
				'method' => 'html',
			),
		);
		$commands[] = ajax_command_html('#slateCell-' . $gid, render($output));
	}
	// See ajax_example_advanced.inc for more details on the available commands
	// and how to use them.
	$page = array(
		'#type' => 'ajax',
		'#commands' => $commands,
	);
	ajax_deliver($page);
}

function pickem_ajax_slate_remove($gid) {
	$result = db_query('SELECT s.* FROM {slate} s WHERE gid = :gid', array(':gid' => $gid));
	$slate = $result->fetchObject();
	$game = pickem_load_game($gid);
	$default_conf_name = variable_get('pickem.default_conference');
	$protected_schools = variable_get('pickem.protected_schools');
	$commands = array();
	#if ($game->host_conf_name == $default_conf_name || 
	#		$game->visiting_conf_name == $default_conf_name) {
	if (in_array($default_conf_name, array($game->host_conf_name, $game->visiting_conf_name))) {
		$commands[] = ajax_command_alert(t("Games involving ACC schools cannot be removed from the slate."));
	} else if (in_array($game->host_school_name, $protected_schools) || 
						 in_array($game->visiting_school_name, $protected_schools)) {
		$commands[] = ajax_command_alert(t('Games involving protected schools cannot be removed from the slate.'));
	} else {
		$num_deleted = db_delete('slate')
			->condition('gid', $gid)
			->condition('pid', '1')
			->execute();

		$msg = "Add to Slate";
		$output = array(
			'#type' => 'link',
			'#title' => t($msg),
			'#href' => 'pickem/ajax/slate/add/' . $gid,
			'#attributes' => array('class' => array('use-ajax', 'slateTrigger')),
			'#ajax' => array(
				'wrapper' => 'slateCell-' . $gid,
				'method' => 'html',
			),
		);
		$commands[] = ajax_command_html('#slateCell-' . $gid, render($output));
	}
	$page = array(
		'#type' => 'ajax',
		'#commands' => $commands,
	);
	ajax_deliver($page);
}

function pickem_permission() {
	return array(
		'administer pickem settings' => array(
			'title' => t('Administer Pickem Setttings'),
			'description' => t('Perform administration tasks on Pickem settings'),
		),
		'administer pickem games' => array(
			'title' => t('Administer Pickem Games'),
			'description' => t('Perform administration tasks on Pickem games'),
		),
		'pickem player' => array(
			'title' => t('Make picks in the pickem contest'),
			'description' => t('Can play the pickem content(s)'),
		),
	);
}
 
function pickem_schedule_overview() {
	return t('Coming soon...');
}

function pickem_block_info($delta='') {
	return array(
		'leaderboard' => array(
			'info' => 'Pickem Standings Leaderboard',
			'cache' => DRUPAL_NO_CACHE,
		)
	);
}

/** 
 * Implements hook_block_view
 */
function pickem_block_view($delta='') {
	global $user;
	if ($delta != 'leaderboard') {
		return '';
	}	
	
	$week = -1;
	
	$headers = array(
		t(''),
		t('Player'),
		t('W'),
		t('L'),
		t('%'),
		t('Picks'),
	);
	$rows = array();

	$standings = pickem_load_standings(-1, 1, variable_get('pickem.current_season'));
	$top_10 = array_slice($standings, 0, 10);
	
	$current_rank = 0;
	$last_correct = NULL;
	$rank_pos = 0;
	
	foreach ($top_10 as $player) {
		$rank_pos++;
		$current_correct = $player->correct;
		
		if ($player->correct != $last_correct) {
			$current_rank = $rank_pos;
			$last_correct = $player->correct;
		}
		
		$pct = 0.0;
		if ($player->correct + $player->incorrect) {
			$pct = (float) $player->correct / ($player->correct + $player->incorrect);
		}
		$classes = array();
		$thumb = '';
		if (user_is_logged_in()) {
			$player->data = user_load($player->uid);
			//dpm($player->data);
			if ($player->player_name == $user->name) {
				$classes[] = 'info';
			}
		}
		$player_name_cell = '<span title="' . $player->uid . '">' . $player->player_name . '</span>';
		
		#if ($player->weeks_won > 0 && ($week == -1)) {
		#	$player_name_cell .= ' (' . $player->weeks_won . ')';
		#}
		#if ($week == -1) {
		#	$player_name_cell = l($player_name_cell, 'user/'.$player->uid.'/pickemresults');
		#}
		//if ($week == $_SESSION['current_week']->week) {
		//	$player_name_cell = l(t($player->player_name), 'pickem/slate/' . $player->uid);
		//}
		$rows[] = array(
			'data' => array(
				array('data' => $current_rank, 'class' => array('text-right')),
				$player_name_cell,
				array('data' => $player->correct, 'class' => array('text-right')),
				array('data' => $player->incorrect, 'class' => array('text-right')),
				array('data' => number_format($pct, 3), 'class' => array('text-right')),
				#$data['num_picks'],
				array('data' => isset($player->pick_count) ? $player->pick_count : '', 'class' => array('text-right')),
			),
			'class' => $classes,
		);
	}
	$build = array(
		'#theme' => 'table',
		'#header' => $headers,
		'#rows' => $rows,
		'#attributes' => array('class' => array('table', 'table-condensed', 'standings')),
	);
	return array(
		'subject' => t('Leaderboard'),
		'content' => $build,
	);
}

function pickem_user_delete($account) {
	db_delete('pick')
		->condition('uid', $account->uid)
		->execute();
}

function pickem_user_register_action($object, $context) {
	# object = user
	// add the 'pickem' role to the newly created user so he/she can make picks
	
	#$role = user_role_load_by_name('pickem');
	#user_multiple_role_edit(array($object->uid), 'add_role', $role->rid);
}

function pickem_ajax_load_slate_stats($uid = NULL) {
	if ($uid == NULL || $uid == 1) {
		$uid = 12;
	}
	$data = pickem_load_pick_data(-1, variable_get('pickem.current_season'), array('uid' => $uid));
	$return = array_shift($data['player']);
	return drupal_json_output(array('player' => $return));
}

function pickem_accproj_lookup($form, &$form_state) {
	$form_state['game_keys'] = array();
	
	$query = db_select('game', 'g')
		->fields('g', array('gid', 'visiting_school_name', 'host_school_name'))
		->condition('completed', 'N');
	$query->join('school', 'visiting', 'g.visiting_school_name = visiting.name');
	$query->join('school', 'host', 'g.host_school_name = host.name');
	$query->addField('host', 'displaytitle', 'host_school');
	$query->addField('visiting', 'displaytitle', 'visiting_school');
	$query->condition('gid', array(24, 40, 56, 72, 79, 80, 96, 104, 111));
	$query->orderBy('game_date');
	$result = $query->execute();
	
	$last_form_key = NULL;
	$form['games_of_interest'] = array(
		'#type' => 'fieldset',
		'#title' => t('Games of Interest'),
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
		'#attributes' => array('class' => array('well')),
	);
	foreach ($result as $ikey => $game) {
		$options = array();
		$key = sprintf("%s over %s", $game->visiting_school_name, $game->host_school_name);
		$options[$key] = t(sprintf("%s over %s", $game->visiting_school, $game->host_school));
		$key = sprintf("%s over %s", $game->host_school_name, $game->visiting_school_name);
		$options[$key] = t(sprintf("%s over %s", $game->host_school, $game->visiting_school));
		
		$form_key = sprintf("%s_%s", $game->visiting_school_name, $game->host_school_name);
		$title = sprintf("%s at %s", $game->visiting_school, $game->host_school);
		$form['games_of_interest'][$form_key] = array(
			'#type' => 'select',
			'#options' => $options,
			'#title' => t($title),
			'#default_value' => isset($form_state['values'][$form_key]) ? $form_state['values'][$form_key] : '',
			'#empty_value' =>'',
			'#empty_option' => t('-- Select Outcome --'),
			//'#prefix' => '<div class="control-group' . (isset($form_state['values'][$form_key]) ? ' success' : '') . '">',
			//'#suffix' => '</div>',
		);

		$form_state['game_keys'][] = $form_key;
		$last_form_key = $form_key;
	}

	//$form['divider'] = array(
	//	'#type' => 'markup',
	//	'#markup' => '<hr class="clearfix" />',
	//);
	$options = array(
		'duke' => t('Duke'),
		'georgiatech' => t('Georgia Tech'),
		'miami' => t('Miami'),
		'vatech' => t('Virginia Tech')
	);
	
	$form['winner'] = array(
		'#type' => 'select',
		'#options' => $options,
		'#default_value' => isset($form_state['values']['winner']) ? $form_state['values']['winner'] : '',
		'#empty_value' =>'',
		'#empty_option' => t('-- Select Winner --'),
		'#title' => t('Winner'),
	);
	$form['divider2'] = array(
		'#type' => 'markup',
		'#markup' => '<hr class="clearfix" />',
	);
	$form['search'] = array(
		'#type' => 'submit',
		'#value' => t('Search Results...'),
		'#prefix' => '<div class="clearfix" style="margin-bottom: 1em;">',
		'#suffix' => '</div>',
	);
	if (isset($form_state['results'])) {
		// create a table
		$header = array(
			t('School'),
			t('# Outcomes as Champion<br /><small>Out of :valid_outcomes outcomes</small>', array(':valid_outcomes' => $form_state['valid_outcomes'])),
			t('Tiebreaker Methods'),
		);
		$rows = array();
		if (!empty($form_state['results'])) {
			foreach ($form_state['results'] as $school_name => $data) {
				$row = array();
				$row[] = array(
					'data' => '<img src="/sites/all/modules/pickem/logos/ncaaf/' . $school_name . '.gif" width="50">',
					'class' => array('text-center')
				);
				$row[] = $data['champ'];
				$how = array();
				foreach ($data['how'] as $hkey => $hdata) {
					$hkey = join(', ', explode(',', $hkey));
					//$how[] = l(sprintf("%s - %s", $hkey, $hdata), 'scene_details/' . $school_name . '/' . $hkey);
					$how[] = sprintf("%s - %s", $hkey, $hdata);
				}
				$row[] = join('<br />', $how);
				$rows[] = $row;
			}
		}
		$form['outcomes'] = array(
			'#theme' => 'table',
			'#attributes' => array(
				'class' => array('table', 'table-bordered', 'table-hover'),
			),
			'#header' => $header,
			'#rows' => $rows,
			'#empty' => t("Your selected winner has likely been eliminated from contention."),
		);
	}
	return $form;
}

function projection_lookup_cmp($a, $b) {
	if ($a['champ'] == $b['champ']) {
		return $a['school_name'] < $b['school_name'] ? -1 : 1;
	}
	return $a['champ'] > $b['champ'] ? -1 : 1;
}

function pickem_accproj_lookup_submit($form, &$form_state) {
	$outcomes = array();
	foreach ($form_state['game_keys'] as $game_key) {
		if ($form_state['values'][$game_key] != '') {
			$outcomes[] = $form_state['values'][$game_key];
		}
	}

	if (empty($outcomes)) {
		return;
	}

	$sql = 'SELECT o.* FROM {outcome_scenario} o ';
	if (!empty($outcomes)) {
		$sql .= 'WHERE (';
		foreach ($outcomes as $ndx => $outcome) {
			$sql .= ($ndx == count($outcomes) - 1) 
				? "scene_text LIKE '%" . $outcome . "%' "
				: "scene_text LIKE '%" . $outcome . "%' AND ";
		}
		$sql .= ') ';
	}
	if (!empty($form_state['values']['winner'])) {
		$sql .= "AND winner = '" . $form_state['values']['winner'] . "'";
	}

	$result = db_query($sql);
	$form_state['results'] = array();
	
	$winners = array();
	$count = 0;
	foreach ($result as $row) {
		$count++;
		if (!isset($winners[$row->winner])) {
			$winners[$row->winner] = array(
				'school_name' => $row->winner,
				'champ' => 0,
				'how' => array()
			);
		}
		$winners[$row->winner]['champ']++;
		if (!isset($winners[$row->winner]['how'][$row->how])) {
			$winners[$row->winner]['how'][$row->how] = 0;
		}
		$winners[$row->winner]['how'][$row->how]++;
	}
	uasort($winners, 'projection_lookup_cmp');
	
	$form_state['results'] = $winners;
	$form_state['valid_outcomes'] = $count;
	
	$form_state['rebuild'] = TRUE;
}

function pickem_fetch_from_google() {
	// anon callback func	
	$filter = function($var) {
		$r = preg_match('/listfeed/', $var['rel']);
		return $r == 1;
	};

	// set timeout length
	$context = stream_context_create(array( 
	    'http' => array( 
	        'timeout' => 5 
	        ) 
	    ) 
	); 
	$spreadsheet_key = '1M58ubV1mzlTaHWgs0YUIn_X3KRpx-M8zqAehG80lNVg';
	$url = 'https://spreadsheets.google.com';
	$queryParams = 'alt=json&amp;callback=displayContent';
	
	// set timeout fallback

	// Pull in Master Google Spreadsheet as JSON
	$worksheets_query_url = sprintf("%s/feeds/worksheets/%s/public/basic?%s", $url, $spreadsheet_key, $queryParams);
	$list_query_url = sprintf("%s/feeds/list/%s/%s/public/values?%s", $url, $spreadsheet_key, 'od6', $queryParams);
	$cells_query_url = sprintf("%s/feeds/cells/%s/%s/public/basic?%s", $url, $spreadsheet_key, 'od6', $queryParams);
	
	$worksheet_content = json_decode(file_get_contents($worksheets_query_url, 0, $context), TRUE);
	dpm($worksheet_content);
	
	# interested in the entry elements to get the links for the tabs (acc, sec, ...)
	$worksheetEntries = $worksheet_content['feed']['entry'];
	
	$listfeed_urls = array();
	foreach ($worksheetEntries as $ws) {
		$listfeed_urls = array_filter($ws['link'], $filter);
		$list_query_url = str_replace('basic', 'values', sprintf("%s?%s", $listfeed_urls[0]['href'], $queryParams));
		dpm($list_query_url);
		$lists_content = json_decode(file_get_contents($list_query_url, 0, $context), TRUE);
		if ($ws['title']['$t'] == 'acc') {
			dpm($lists_content);
			#foreach ($lists_content['feed']['entry'] as $g) {	// g => 'game'
			#}
		}
	}
	

	return "Testing";
	
}
