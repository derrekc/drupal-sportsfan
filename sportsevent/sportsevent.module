<?php

/**
 * 
 */
function sportevents_menu() {
	return array(
		'admin/content/sportsevent/ncaaf' => array(
			'title' => 'NCAA Football',
			'access arguments' => array('administer sportsevent entities'),
			'type' => MENU_NORMAL_ITEM,
		),
		'admin/structure/sportsevent' => array(
			'title' => 'Sporting Events',
			'access arguments' => array('administer sportsevent entities'),
			'type' => MENU_NORMAL_ITEM,
		),
		'admin/structure/sportsevent/ncaaf' => array(
			'title' => 'NCAA Football',
			'access arguments' => array('administer sportsevent entities'),
		),
		'admin/structure/sportsevent/ncaaf/manage' => array(
			'title' => 'NCAA Football',
			'access arguments' => array('administer sportsevent entities'),
		),
		'admin/structure/sportsevent/ncaam/manage' => array(
			'title' => 'NCAA Men\'s Basketball',
			'access arguments' => array('administer sportsevent entities'),
			'type' => MENU_NORMAL_ITEM,
		),
		'admin/structure/sportsevent/nfl/manage' => array(
			'title' => 'NFL Football',
			'access arguments' => array('administer sportsevent entities'),
			'type' => MENU_NORMAL_ITEM,
		),
		#'sportsevent/%sportsevent/edit-score' => array(	
		#	'title' => 'Edit Score',
		#	'access arguments' => array('edit sportsevent entities'),
		#	'type' => MENU_CALLBACK,
		#	'page callback' => 'drupal_get_form',
		#	'page arguments' => array('sportsevent_edit_score_form', 1),
		#)
	);
}

/**
 * Implementation of hook_entity_info
 */
function sportsevent_entity_info() {
	return array(
		'sportsevent' => array(
			'label' => t('Sporting Event'),
			'label callback' => 'sportsevent_label_callback',
			'plural label' => t('Sporting Events'),
			'entity class' => 'SportsEvent',
			'controller class' => 'SportsEventAPIController',
			'base table' => 'sportsevent',
			'fieldable' => TRUE,
			'entity keys' => array(
				'id' => 'eid',
				'bundle' => 'sport',
			),
			'load hook' => 'sportsevent_load',
			'admin ui' => array(
				'path' => 'admin/content/sportsevent',
				'controller class' => 'SportsEventUIController',
				'file' => 'includes/sportsevent.admin.inc',
			),
			'bundles' => array(
				'ncaaf' => array(
					'label' => 'College Football',
					'uri callback' => 'sportsevent_ncaam_uri_callback',
					'admin' => array(
						'path' => 'admin/structure/sportsevent/ncaaf/manage',
						'access arguments' => array('administer sportsevent entities'),
					),
				),
				'ncaam' => array(
					'label' => 'Men\'s College Basketball',
					'admin' => array(
						'path' => 'admin/structure/sportsevent/ncaam/manage',
						'access arguments' => array('administer sportsevent entities'),
					),
				),
				/*
				'nfl' => array(
					'label' => 'NFL',
					'admin' => array(
						'path' => 'admin/structure/sportsevent/nfl/manage',
						'access arguments' => array('administer sportsevent entities'),
					),
				),
				*/
			),
			'module' => 'sportsevent',
			'access callback' => 'sportsevent_access_callback',
			'static cache' => FALSE,
			'uri callback' => 'sportsevent_uri_callback',
		  'view modes' => array(
        'full' => array(
          'label' => t('Full SportsEvent Info'),
          'custom settings' => FALSE,
        ),
        'scoreboard' => array(
          'label' => t('Scoreboard'),
          'custom settings' => FALSE,
        )  
      )
		),
	);
}

/* FIELD INFO HOOKS
--------------------------------------------- */
function sportsevent_field_info() {
	$field_type = array();
	$field_type['sportsevent'] = array(
		'label' => 'Sporting Event',
		'description' => 'Sporting Event',
		'widget' => array(
			'type' => 'sportsevent_text',
		),
		'default_widget' => 'sportsevent_text',
		'default_formatter' => 'sportsevent_simple',
	);
	return $field_type;
}

function sportsevent_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  // load each sportsevent entity
	foreach ($items as $nid => $item) {
		$items[$nid][0]['sportsevent'] = sportsevent_load($item[0]['eid']);
	}
}

function sportsevent_field_schema($field) {
	$columns = array(
		'eid' => array('type' => 'int', 'not null' => FALSE,),
	);
	$indexes = array(
		'eid' => array('eid'),
	);
	return array(
		'columns' => $columns,
		'indexes' => $indexes,
	);
}

function sportsevent_field_is_empty($item, $field) {
	return empty($item['eid']);	
}

function sportsevent_field_formatter_info() {
	return array(
		'sportsevent_simple' => array(
			'label' => t('Simple SportsEvent Item Display'),
			'field types' => array('sportsevent'),
		),
		'sportsevent_logos' => array(
			'label' => t('SportsEvent Display with Logos'),
			'field types' => array('sportsevent'),
		),
	);
}

function sportsevent_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
	$element = array();
	
	switch ($display['type']) {
		// This formatter displays the SportsEvent title and opponents
		case 'sportsevent_simple':
			foreach ($items as $delta => $item) {
				$element[$delta]['#theme'] = 'sportsevent_formatter_simple';
				$element[$delta]['#sportsevent'] = $item['sportsevent'];
			}
			break;
			
		case 'sportsevent_logos':
			foreach ($items as $delta => $item) {
				$element[$delta]['#markup'] = '<p>Hi There with logos: ' . $delta . '</p>';
			}
			break;
			
	}
	return $element;
}

function sportsevent_field_widget_info() {
	return array(
		'sportsevent_text' => array(
			'label' => t('SportsEvent ID Field'),
			'field types' => array('sportsevent'),
		)
	);
}

function sportsevent_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
	$value = isset($items[$delta]['eid']) ? $items[$delta]['eid'] : '';
	
	$element += array('#delta' => $delta);
	$element['eid'] = array();
	
	switch ($instance['widget']['type']) {
		case 'sportsevent_text':
			$element['eid'] += array(
				'#type' => 'textfield',
				'#title' => t('Sports Event ID'),
				'#default_value' => $value,
			);
			break;
		
	}
	return $element;
}

/**
 * Sportsevent access callback.
 */
function sportsevent_access_callback() {

  if (user_is_anonymous() || !user_access('administer sportsevent entities')) {
    return FALSE;
  }
  else {
    return TRUE;
  }

}

/**
 * Implementation of hook_theme
 */
function sportsevent_theme($existing, $type, $theme, $path) {
	return array(
		'sportsevent_formatter_simple' => array(
			'template' => 'sportsevent_formatter_simple',
			'variables' => array('sportsevent' => NULL),
			'path' => $path . '/theme',
		)
	);
}

/**
 * Implementation of hook_permission
 */
function sportsevent_permission() {
	return array(
    // Sports Event permissions
    'administer sportsevent entities' => array(
      'title' => t('Administer SportsEvent Entities'),
      'description' => t('Allows a user to administer sportsevent entities'),
    ),
    'view sportsevent entities' => array(
      'title' => t('View SportsEvent Entity'),
      'description' => t('Allows a user to view the sportsevent entities.'),
    ),
    'create sportsevent entities' => array(
      'title' => t('Create SportsEvent Entities'),
      'description' => t('Allows a user to create sportsevent entities.'),
    ),
    'edit sportsevent entities' => array(
      'title' => t('Edit SportsEvent Entities'),
      'description' => t('Allows a user to edit sportsevent entities.'),
    ),
    'delete sportsevent entities' => array(
      'title' => t('Delete SportsEvent Entities'),
      'description' => t('Allows a user to delete sportsevent entities.'),
    ),
    'use sportsevent bulk operations' => array(
      'title' => t('Do bulk operations on sportsevent entities'),
      'description' => t('Allows a user to do bulk operations.'),
    ),
	);	
}

/**
 * 
 */
function sportsevent_twitter_status_save($status) {
	watchdog('sportsevent', print_r($status, TRUE));
	
	# parse the text property
	$tweet = str_replace('@sportsched', '', $status->text);
	//TODO implement sport
	$patt = '/^\s*(?P<twitter_hashtag>#\w*)\s+(?P<winner>\w+),?\s*(?P<winning_score>\d{1,2})\s?[-](?P<losing_score>\d{1,2}).*$/';
	$match = array();
	preg_match($patt, $tweet, $match);
	watchdog('sportsevent', print_r($match, TRUE));
	
	if (!empty($match)) {
		//TODO implement sport
		$e = sportsevent_load_by_hashtag($match['twitter_hashtag'], $sport);
		watchdog('sportsevent', print_r($e, TRUE));
		if ($e->completed()) {
			return;
		}
	}
	
	$match['winner'] = strtolower($match['winner']);
}

/**
 * URI callback for Game
 */
function sportsevent_basic_uri($sportsevent) {
	return array(
		'path' => sprintf('sportsevent/%s/%s/%s/%s', 
			$sportsevent->sport, 
			$sportsevent->season,
			$sportsevent->visiting_team_name,
			$sportsevent->host_team_name)
		);
}

/**
 * Label callback for sportsevent entities
 */
function sportsevent_label_callback($sportsevent, $type) {
	$title = $sportsevent->title();
	return empty($title) ? 'Untitled Sports Event' : $title;	
}

/**
 * URI callback for sportsevent entities
 */
function sportsevent_uri_callback($sportsevent) {
  return array(
    'path' => 'sportsevent/' . $sportsevent->eid,
   );
}

function sportsevent_ncaaf_uri_callback($sportsevent) {
  return array(
    'path' => 'sportsevent/ncaaf/' . $sportsevent->eid,
  );
}

// games

/**
 * Autoload callback
 */
function sportsevent_load($sportsevent_id, $reset=FALSE) {
  $sportsevent = sportsevent_load_multiple(array($sportsevent_id), array(), $reset);
  return reset($sportsevent);
}

/**
 * Load multiple games based on certain conditions.
 */
function sportsevent_load_multiple($sportsevent_ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('sportsevent', $sportsevent_ids, $conditions, $reset);
}

/**
 * Load game by opponents (and season)
 */
function sportsevent_load_by_opponents($host_team_name, $visiting_team_name, $conditions = array()) {
	$conditions['host_team_name'] = $host_team_name;
	$conditions['visiting_team_name'] = $visiting_team_name;
	$games = sportsevent_load_multiple(FALSE, $conditions, TRUE);
	return reset($games);
}

/**
 * Load sportsevent by twitter_hashtag
 */
function sportsevent_load_by_hashtag($hashtag, $sport) {
	$conditions['twitter_hashtag'] = $hashtag;
	$conditions['sport'] = $sport;
	$events = sportsevent_load_multiple(FALSE, $conditions, TRUE);
	return reset($events);
}

/**
 * Deletes a Game.
 */
function sportsevent_delete(Game $game) {
  $game->delete();
}

/**
 * Delete multiple games.
 */
function sportsevent_delete_multiple(array $sportsevent_ids) {
  entity_get_controller('game')->delete($sportsevent_ids);
}
