<?php

/**
 * Implements hook_entity_info
 */
function team_entity_info() {
	return array(
		'team' => array(
			'label' => t('Team'),
			'label callback' => 'team_label_callback',
			'plural label' => t('Teams'),
			'entity class' => 'Team',
			'controller class' => 'EntityAPIController',
			'base table' => 'team',
			'fieldable' => TRUE,
			'entity keys' => array(
				'id' => 'tid'
			),
			'load hook' => 'team_load',
			'admin ui' => array(
				'path' => 'admin/content/teams',
				'controller class' => 'TeamUIController',
				'file' => 'includes/team.admin.inc',
			),
			'bundles' => array(
				'team' => array(
					'label' => 'Team',
					'admin' => array(
						'path' => 'admin/structure/team/manage',
						'access arguments' => array('administer team entities'),
					),
				),
				'college-team' => array(
					'label' => 'College Team',
					'admin' => array(
						'path' => 'admin/structure/team/manage',
						'access arguments' => array('administer team entities'),
					),
				),
				'pro-team' => array(
					'label' => 'Pro Team',
					'admin' => array(
						'path' => 'admin/structure/team/manage',
						'access arguments' => array('administer team entities'),
					),
				),
			),
			'module' => 'team',
			'access callback' => 'team_access_callback',
			'static cache' => TRUE,
			'uri callback' => 'entity_class_uri',
		),
		
		// CONFERENCE
		'conference' => array(
			'label' => t('Sports Conference'),
			'label callback' => 'entity_label',
			'entity class' => 'Conference',
			'plural label' => t('Sports Conferences'),
			'controller class' => 'ConferenceController',
			'base table' => 'conference',
			'load look' => 'conference_load',
			'fieldable' => TRUE,
			'uri callback' => 'conference_basic_uri',
			'entity keys' => array(
				'id' => 'cid',
			),
			'module' => 'team',
		),
	);
	
}

/**
 * Implements hook_menu().
 */
function team_menu() {
  $items = array();

  $items['team/%team'] = array(
    'title' => 'Team',
    'page callback' => 'team_view_entity',
    'page arguments' => array(1),
    'access callback' => 'team_access_menu_callback',
    'access arguments' => array('view', 1),
  );

  $items['admin/content/team/bulk/delete/%'] = array(
    'title' => 'Bulk Delete Teams',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('team_bulk_delete', 5),
    'access arguments' => array('administer team entities'),
    'file' => 'includes/team.admin.inc',
  );

  $items['admin/structure/team'] = array(
    'title' => 'Team Fields',
    'access arguments' => array('administer team entities'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function team_permission() {
  return array(
    'administer team entities' => array(
      'title' => t('Administer Team Entities'),
      'description' => t('Allows a user to administer team entities'),
    ),
    'view team entities' => array(
      'title' => t('View Team Entity'),
      'description' => t('Allows a user to view the team entities.'),
    ),
    'create team entities' => array(
      'title' => t('Create Team Entities'),
      'description' => t('Allows a user to create team entities.'),
    ),
    'edit team entities' => array(
      'title' => t('Edit Team Entities'),
      'description' => t('Allows a user to edit team entities.'),
    ),
    'delete team entities' => array(
      'title' => t('Delete Team Entities'),
      'description' => t('Allows a user to delete team entities.'),
    ),
    'use team bulk operations' => array(
      'title' => t('Do bulk operations on Team entities'),
      'description' => t('Allows a user to do bulk operations.'),
    ),
  );
}
/**
 * Check access permission for Team Entity UI.
 */
function team_access_menu_callback($op, $team = NULL, $account = NULL) {
  switch ($op) {
    case 'view':
      return user_access('view team entities', $account);

    case 'create':
      return user_access('create team entities', $account);

    case 'update':
      return user_access('edit team entities', $account);

    case 'delete':
      return user_access('delete team entities', $account);
  }

  return FALSE;
}

/**
 * Team access callback.
 */
function team_access_callback() {

  if (user_is_anonymous() || !user_access('administer team entities')) {
    return FALSE;
  }
  else {
    return TRUE;
  }

}

/**
 * Implements hook_theme().
 */
function team_theme() {
  return array(
    'team_full' => array(
      'variables' => array('team' => NULL),
      'file' => 'includes/team.theme.inc',
    ),
  );
}

// LABEL CALLBACKS
/**
 * Label callback for team entities
 */
function team_label_callback($team, $type) {
	return empty($team->name) ? 'Untitled Team' : $team->displaytitle;	
}

/**
 * URI Callback for Team
 */
function team_basic_uri($team) {
	return array(
		'path' => sprintf('team/%s/%s', $team->sport, $team->name),
	);
}

// URI CALLBACKS
/**
 * URI Callback for Conference
 */
function conference_basic_uri($conference) {
	return array(
		'path' => sprintf('conference/%s', $conference->name),
	);
}

/**
 * Menu autoloader for /team.
 */
function team_load($team_id, $reset = FALSE) {
  $team = team_load_multiple(array($team_id), array(), $reset);
  return reset($team);
}

/**
 * Load multiple team based on certain conditions.
 */
function team_load_multiple($team_ids = FALSE, $conditions = array('active' => 1), $reset = FALSE) {
  return entity_load('team', $team_ids, $conditions, $reset);
}

/**
 * Load team by name
 */
function team_load_by_name($tname) {
	$teams = team_load_multiple(FALSE, array('name' => $tname));
	return reset($teams);
}
/**
 * Deletes a Team.
 */
function team_delete(Team $team) {
  $team->delete();
}

/**
 * Delete multiple team.
 */
function team_delete_multiple(array $team_ids) {
  entity_get_controller('team')->delete($team_ids);
}

/**
 * View for /lawmakers/<lawmakers_id> page.
 */
function team_view_entity($team) {
  $fullname = $team->displaytitle ;
  drupal_set_title($fullname);
  // Path not entity.
  $team_output = theme('team_full', array('team' => $team));
  return $team_output;
}


/**
 * Menu autoloader for /conference.
 */
function conference_load($conference_id, $reset = FALSE) {
  $conference = conference_load_multiple(array($conference_id), array(), $reset);
  return reset($conference);
}

/**
 * Load multiple team based on certain conditions.
 */
function conference_load_multiple($conference_ids = FALSE, $conditions = array('active' => 1), $reset = FALSE) {
  return entity_load('conference', $conference_ids, $conditions, $reset);
}

/**
 * Load team by name
 */
function conference_load_by_name($cname) {
	$conferences = conference_load_multiple(FALSE, array('name' => $cname));
	return reset($conferences);
}
/**
 * Deletes a Team.
 */
function conference_delete(Conference $conference) {
  $team->delete();
}

/**
 * Delete multiple team.
 */
function conference_delete_multiple(array $conference_ids) {
  entity_get_controller('conference')->delete($conference_ids);
}

/**
 * View for /conference/<conference_id> page.
 */
function conference_view_entity($team) {
  $fullname = $team->displaytitle ;
  drupal_set_title($fullname);
  // Path not entity.
  $conference_output = theme('conference_full', array('conference' => $team));
  return $conference_output;
}

